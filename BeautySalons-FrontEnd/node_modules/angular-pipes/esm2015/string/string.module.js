import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { NgLeftPadPipeModule } from './left-pad.pipe';
import { NgMatchPipeModule } from './match.pipe';
import { NgPadPipeModule } from './pad.pipe';
import { NgReplacePipeModule } from './replace.pipe';
import { NgRightPadPipeModule } from './right-pad.pipe';
import { NgSplitPipeModule } from './split.pipe';
import { NgTestPipeModule } from './test.pipe';
import { NgTrimPipeModule } from './trim.pipe';
import { NgNewlinesPipeModule } from './newlines.pipe';
import { NgCapitalizePipeModule } from './capitalize.pipe';
import { NgUpperFirstPipeModule } from './upperfirst.pipe';
import { NgTemplatePipeModule } from './template.pipe';
import { NgEncodeURIPipeModule } from './encode-uri.pipe';
import { NgEncodeURIComponentPipeModule } from './encode-uri-component.pipe';
import { NgDecodeURIPipeModule } from './decode-uri.pipe';
import { NgDecodeURIComponentPipeModule } from './decode-uri-component.pipe';
import { NgTruncatePipeModule } from './truncate.pipe';
import { NgRepeatPipeModule } from './repeat.pipe';
import { NgSlugifyPipeModule } from './slugify.pipe';
import { NgStripTagsPipeModule } from './strip-tags.pipe';
import { NgLatinizePipeModule } from './latinize.pipe';
import { NgWrapPipeModule } from './wrap.pipe';
import { NgWithPipeModule } from './with.pipe';
import { NgReverseStrPipeModule } from './reverse-str.pipe';
let NgStringPipesModule = class NgStringPipesModule {
};
NgStringPipesModule = tslib_1.__decorate([
    NgModule({
        imports: [
            NgCapitalizePipeModule,
            NgDecodeURIComponentPipeModule,
            NgDecodeURIPipeModule,
            NgEncodeURIComponentPipeModule,
            NgLeftPadPipeModule,
            NgMatchPipeModule,
            NgPadPipeModule,
            NgReplacePipeModule,
            NgRightPadPipeModule,
            NgSplitPipeModule,
            NgTestPipeModule,
            NgTrimPipeModule,
            NgNewlinesPipeModule,
            NgUpperFirstPipeModule,
            NgTemplatePipeModule,
            NgEncodeURIPipeModule,
            NgTruncatePipeModule,
            NgRepeatPipeModule,
            NgSlugifyPipeModule,
            NgStripTagsPipeModule,
            NgLatinizePipeModule,
            NgWrapPipeModule,
            NgWithPipeModule,
            NgReverseStrPipeModule,
        ],
    })
], NgStringPipesModule);
export { NgStringPipesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJzdHJpbmcvc3RyaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQThCNUQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7Q0FBRyxDQUFBO0FBQXRCLG1CQUFtQjtJQTVCL0IsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFO1lBQ1Asc0JBQXNCO1lBQ3RCLDhCQUE4QjtZQUM5QixxQkFBcUI7WUFDckIsOEJBQThCO1lBQzlCLG1CQUFtQjtZQUNuQixpQkFBaUI7WUFDakIsZUFBZTtZQUNmLG1CQUFtQjtZQUNuQixvQkFBb0I7WUFDcEIsaUJBQWlCO1lBQ2pCLGdCQUFnQjtZQUNoQixnQkFBZ0I7WUFDaEIsb0JBQW9CO1lBQ3BCLHNCQUFzQjtZQUN0QixvQkFBb0I7WUFDcEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsbUJBQW1CO1lBQ25CLHFCQUFxQjtZQUNyQixvQkFBb0I7WUFDcEIsZ0JBQWdCO1lBQ2hCLGdCQUFnQjtZQUNoQixzQkFBc0I7U0FDdkI7S0FDRixDQUFDO0dBQ1csbUJBQW1CLENBQUc7U0FBdEIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5nTGVmdFBhZFBpcGVNb2R1bGUgfSBmcm9tICcuL2xlZnQtcGFkLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ01hdGNoUGlwZU1vZHVsZSB9IGZyb20gJy4vbWF0Y2gucGlwZSc7XHJcbmltcG9ydCB7IE5nUGFkUGlwZU1vZHVsZSB9IGZyb20gJy4vcGFkLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ1JlcGxhY2VQaXBlTW9kdWxlIH0gZnJvbSAnLi9yZXBsYWNlLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ1JpZ2h0UGFkUGlwZU1vZHVsZSB9IGZyb20gJy4vcmlnaHQtcGFkLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ1NwbGl0UGlwZU1vZHVsZSB9IGZyb20gJy4vc3BsaXQucGlwZSc7XHJcbmltcG9ydCB7IE5nVGVzdFBpcGVNb2R1bGUgfSBmcm9tICcuL3Rlc3QucGlwZSc7XHJcbmltcG9ydCB7IE5nVHJpbVBpcGVNb2R1bGUgfSBmcm9tICcuL3RyaW0ucGlwZSc7XHJcbmltcG9ydCB7IE5nTmV3bGluZXNQaXBlTW9kdWxlIH0gZnJvbSAnLi9uZXdsaW5lcy5waXBlJztcclxuaW1wb3J0IHsgTmdDYXBpdGFsaXplUGlwZU1vZHVsZSB9IGZyb20gJy4vY2FwaXRhbGl6ZS5waXBlJztcclxuaW1wb3J0IHsgTmdVcHBlckZpcnN0UGlwZU1vZHVsZSB9IGZyb20gJy4vdXBwZXJmaXJzdC5waXBlJztcclxuaW1wb3J0IHsgTmdUZW1wbGF0ZVBpcGVNb2R1bGUgfSBmcm9tICcuL3RlbXBsYXRlLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0VuY29kZVVSSVBpcGVNb2R1bGUgfSBmcm9tICcuL2VuY29kZS11cmkucGlwZSc7XHJcbmltcG9ydCB7IE5nRW5jb2RlVVJJQ29tcG9uZW50UGlwZU1vZHVsZSB9IGZyb20gJy4vZW5jb2RlLXVyaS1jb21wb25lbnQucGlwZSc7XHJcbmltcG9ydCB7IE5nRGVjb2RlVVJJUGlwZU1vZHVsZSB9IGZyb20gJy4vZGVjb2RlLXVyaS5waXBlJztcclxuaW1wb3J0IHsgTmdEZWNvZGVVUklDb21wb25lbnRQaXBlTW9kdWxlIH0gZnJvbSAnLi9kZWNvZGUtdXJpLWNvbXBvbmVudC5waXBlJztcclxuaW1wb3J0IHsgTmdUcnVuY2F0ZVBpcGVNb2R1bGUgfSBmcm9tICcuL3RydW5jYXRlLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ1JlcGVhdFBpcGVNb2R1bGUgfSBmcm9tICcuL3JlcGVhdC5waXBlJztcclxuaW1wb3J0IHsgTmdTbHVnaWZ5UGlwZU1vZHVsZSB9IGZyb20gJy4vc2x1Z2lmeS5waXBlJztcclxuaW1wb3J0IHsgTmdTdHJpcFRhZ3NQaXBlTW9kdWxlIH0gZnJvbSAnLi9zdHJpcC10YWdzLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0xhdGluaXplUGlwZU1vZHVsZSB9IGZyb20gJy4vbGF0aW5pemUucGlwZSc7XHJcbmltcG9ydCB7IE5nV3JhcFBpcGVNb2R1bGUgfSBmcm9tICcuL3dyYXAucGlwZSc7XHJcbmltcG9ydCB7IE5nV2l0aFBpcGVNb2R1bGUgfSBmcm9tICcuL3dpdGgucGlwZSc7XHJcbmltcG9ydCB7IE5nUmV2ZXJzZVN0clBpcGVNb2R1bGUgfSBmcm9tICcuL3JldmVyc2Utc3RyLnBpcGUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBOZ0NhcGl0YWxpemVQaXBlTW9kdWxlLFxyXG4gICAgTmdEZWNvZGVVUklDb21wb25lbnRQaXBlTW9kdWxlLFxyXG4gICAgTmdEZWNvZGVVUklQaXBlTW9kdWxlLFxyXG4gICAgTmdFbmNvZGVVUklDb21wb25lbnRQaXBlTW9kdWxlLFxyXG4gICAgTmdMZWZ0UGFkUGlwZU1vZHVsZSxcclxuICAgIE5nTWF0Y2hQaXBlTW9kdWxlLFxyXG4gICAgTmdQYWRQaXBlTW9kdWxlLFxyXG4gICAgTmdSZXBsYWNlUGlwZU1vZHVsZSxcclxuICAgIE5nUmlnaHRQYWRQaXBlTW9kdWxlLFxyXG4gICAgTmdTcGxpdFBpcGVNb2R1bGUsXHJcbiAgICBOZ1Rlc3RQaXBlTW9kdWxlLFxyXG4gICAgTmdUcmltUGlwZU1vZHVsZSxcclxuICAgIE5nTmV3bGluZXNQaXBlTW9kdWxlLFxyXG4gICAgTmdVcHBlckZpcnN0UGlwZU1vZHVsZSxcclxuICAgIE5nVGVtcGxhdGVQaXBlTW9kdWxlLFxyXG4gICAgTmdFbmNvZGVVUklQaXBlTW9kdWxlLFxyXG4gICAgTmdUcnVuY2F0ZVBpcGVNb2R1bGUsXHJcbiAgICBOZ1JlcGVhdFBpcGVNb2R1bGUsXHJcbiAgICBOZ1NsdWdpZnlQaXBlTW9kdWxlLFxyXG4gICAgTmdTdHJpcFRhZ3NQaXBlTW9kdWxlLFxyXG4gICAgTmdMYXRpbml6ZVBpcGVNb2R1bGUsXHJcbiAgICBOZ1dyYXBQaXBlTW9kdWxlLFxyXG4gICAgTmdXaXRoUGlwZU1vZHVsZSxcclxuICAgIE5nUmV2ZXJzZVN0clBpcGVNb2R1bGUsXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU3RyaW5nUGlwZXNNb2R1bGUge31cclxuIl19