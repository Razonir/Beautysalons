import * as tslib_1 from "tslib";
var OrderByPipe_1;
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
let OrderByPipe = OrderByPipe_1 = class OrderByPipe {
    static _orderBy(a, b) {
        if (a instanceof Date && b instanceof Date) {
            return a < b ? -1 : a > b ? 1 : 0;
        }
        const floatA = parseFloat(a);
        const floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            const lowerA = a.toLowerCase();
            const lowerB = b.toLowerCase();
            return lowerA < lowerB ? -1 : lowerA > lowerB ? 1 : 0;
        }
        return floatA < floatB ? -1 : floatA > floatB ? 1 : 0;
    }
    transform(input, config = '+') {
        if (!isArray(input)) {
            return input;
        }
        const configIsArray = isArray(config);
        // If config === 'param' OR ['param']
        if (!configIsArray || (configIsArray && config.length === 1)) {
            const propertyToCheck = configIsArray ? config[0] : config;
            const first = propertyToCheck.substr(0, 1);
            const desc = first === '-'; // First character is '-'
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return [...input].sort((a, b) => {
                    const comparator = OrderByPipe_1._orderBy(a, b);
                    return desc ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                const property = first === '+' || desc ? propertyToCheck.substr(1) : propertyToCheck;
                return [...input].sort((a, b) => {
                    const comparator = OrderByPipe_1._orderBy(a[property], b[property]);
                    return desc ? -comparator : comparator;
                });
            }
        }
        else {
            // Config is an array of property
            return [...input].sort((a, b) => {
                for (let i = 0; i < config.length; ++i) {
                    const first = config[i].substr(0, 1);
                    const desc = first === '-';
                    const property = first === '+' || desc ? config[i].substr(1) : config[i];
                    const comparator = OrderByPipe_1._orderBy(a[property], b[property]);
                    const comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    }
};
OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
    Pipe({
        name: 'orderBy',
    })
], OrderByPipe);
export { OrderByPipe };
let NgOrderByPipeModule = class NgOrderByPipeModule {
};
NgOrderByPipeModule = tslib_1.__decorate([
    NgModule({
        declarations: [OrderByPipe],
        exports: [OrderByPipe],
    })
], NgOrderByPipeModule);
export { NgOrderByPipeModule };
//# sourceMappingURL=data:application/json;base64,