import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { NgIsEqualPipeModule } from './is-equal.pipe';
import { NgIsGreaterOrEqualPipeModule } from './is-greater-or-equal.pipe';
import { NgIsGreaterPipeModule } from './is-greater.pipe';
import { NgIsIdenticalPipeModule } from './is-identical.pipe';
import { NgIsLessOrEqualPipeModule } from './is-less-or-equal.pipe';
import { NgIsLessPipeModule } from './is-less.pipe';
import { NgIsNotEqualPipeModule } from './is-not-equal.pipe';
import { NgIsNotIdenticalPipeModule } from './is-not-identical.pipe';
import { NgIsNullPipeModule } from './is-null.pipe';
import { NgIsUndefinedPipeModule } from './is-undefined.pipe';
import { NgIsNilPipeModule } from './is-nil.pipe';
import { NgIsFunctionPipeModule } from './is-function.pipe';
import { NgIsNumberPipeModule } from './is-number.pipe';
import { NgIsStringPipeModule } from './is-string.pipe';
import { NgIsArrayPipeModule } from './is-array.pipe';
import { NgIsObjectPipeModule } from './is-object.pipe';
import { NgIsDefinedPipeModule } from './is-defined.pipe';
var NgTypesPipesModule = /** @class */ (function () {
    function NgTypesPipesModule() {
    }
    NgTypesPipesModule = tslib_1.__decorate([
        NgModule({
            imports: [
                NgIsNullPipeModule,
                NgIsUndefinedPipeModule,
                NgIsNilPipeModule,
                NgIsFunctionPipeModule,
                NgIsNumberPipeModule,
                NgIsStringPipeModule,
                NgIsArrayPipeModule,
                NgIsObjectPipeModule,
                NgIsDefinedPipeModule,
            ],
        })
    ], NgTypesPipesModule);
    return NgTypesPipesModule;
}());
export { NgTypesPipesModule };
var NgConditionsPipesModule = /** @class */ (function () {
    function NgConditionsPipesModule() {
    }
    NgConditionsPipesModule = tslib_1.__decorate([
        NgModule({
            imports: [
                NgIsEqualPipeModule,
                NgIsGreaterOrEqualPipeModule,
                NgIsGreaterPipeModule,
                NgIsIdenticalPipeModule,
                NgIsLessOrEqualPipeModule,
                NgIsLessPipeModule,
                NgIsNotEqualPipeModule,
                NgIsNotIdenticalPipeModule,
            ],
        })
    ], NgConditionsPipesModule);
    return NgConditionsPipesModule;
}());
export { NgConditionsPipesModule };
var NgBooleanPipesModule = /** @class */ (function () {
    function NgBooleanPipesModule() {
    }
    NgBooleanPipesModule = tslib_1.__decorate([
        NgModule({
            imports: [NgConditionsPipesModule, NgTypesPipesModule],
        })
    ], NgBooleanPipesModule);
    return NgBooleanPipesModule;
}());
export { NgBooleanPipesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBpcGVzLyIsInNvdXJjZXMiOlsiYm9vbGVhbi9ib29sZWFuLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFlMUQ7SUFBQTtJQUFpQyxDQUFDO0lBQXJCLGtCQUFrQjtRQWI5QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1Asa0JBQWtCO2dCQUNsQix1QkFBdUI7Z0JBQ3ZCLGlCQUFpQjtnQkFDakIsc0JBQXNCO2dCQUN0QixvQkFBb0I7Z0JBQ3BCLG9CQUFvQjtnQkFDcEIsbUJBQW1CO2dCQUNuQixvQkFBb0I7Z0JBQ3BCLHFCQUFxQjthQUN0QjtTQUNGLENBQUM7T0FDVyxrQkFBa0IsQ0FBRztJQUFELHlCQUFDO0NBQUEsQUFBbEMsSUFBa0M7U0FBckIsa0JBQWtCO0FBYy9CO0lBQUE7SUFBc0MsQ0FBQztJQUExQix1QkFBdUI7UUFabkMsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFO2dCQUNQLG1CQUFtQjtnQkFDbkIsNEJBQTRCO2dCQUM1QixxQkFBcUI7Z0JBQ3JCLHVCQUF1QjtnQkFDdkIseUJBQXlCO2dCQUN6QixrQkFBa0I7Z0JBQ2xCLHNCQUFzQjtnQkFDdEIsMEJBQTBCO2FBQzNCO1NBQ0YsQ0FBQztPQUNXLHVCQUF1QixDQUFHO0lBQUQsOEJBQUM7Q0FBQSxBQUF2QyxJQUF1QztTQUExQix1QkFBdUI7QUFLcEM7SUFBQTtJQUFtQyxDQUFDO0lBQXZCLG9CQUFvQjtRQUhoQyxRQUFRLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxrQkFBa0IsQ0FBQztTQUN2RCxDQUFDO09BQ1csb0JBQW9CLENBQUc7SUFBRCwyQkFBQztDQUFBLEFBQXBDLElBQW9DO1NBQXZCLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBOZ0lzRXF1YWxQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1lcXVhbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc0dyZWF0ZXJPckVxdWFsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtZ3JlYXRlci1vci1lcXVhbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc0dyZWF0ZXJQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzSWRlbnRpY2FsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtaWRlbnRpY2FsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzTGVzc09yRXF1YWxQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1sZXNzLW9yLWVxdWFsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzTGVzc1BpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWxlc3MucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNOb3RFcXVhbFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLW5vdC1lcXVhbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc05vdElkZW50aWNhbFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLW5vdC1pZGVudGljYWwucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNOdWxsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtbnVsbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc1VuZGVmaW5lZFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLXVuZGVmaW5lZC5waXBlJztcclxuaW1wb3J0IHsgTmdJc05pbFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLW5pbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc0Z1bmN0aW9uUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtZnVuY3Rpb24ucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNOdW1iZXJQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1udW1iZXIucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNTdHJpbmdQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1zdHJpbmcucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNBcnJheVBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWFycmF5LnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzT2JqZWN0UGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtb2JqZWN0LnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzRGVmaW5lZFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWRlZmluZWQucGlwZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIE5nSXNOdWxsUGlwZU1vZHVsZSxcclxuICAgIE5nSXNVbmRlZmluZWRQaXBlTW9kdWxlLFxyXG4gICAgTmdJc05pbFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzRnVuY3Rpb25QaXBlTW9kdWxlLFxyXG4gICAgTmdJc051bWJlclBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzU3RyaW5nUGlwZU1vZHVsZSxcclxuICAgIE5nSXNBcnJheVBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzT2JqZWN0UGlwZU1vZHVsZSxcclxuICAgIE5nSXNEZWZpbmVkUGlwZU1vZHVsZSxcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdUeXBlc1BpcGVzTW9kdWxlIHt9XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIE5nSXNFcXVhbFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzR3JlYXRlck9yRXF1YWxQaXBlTW9kdWxlLFxyXG4gICAgTmdJc0dyZWF0ZXJQaXBlTW9kdWxlLFxyXG4gICAgTmdJc0lkZW50aWNhbFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzTGVzc09yRXF1YWxQaXBlTW9kdWxlLFxyXG4gICAgTmdJc0xlc3NQaXBlTW9kdWxlLFxyXG4gICAgTmdJc05vdEVxdWFsUGlwZU1vZHVsZSxcclxuICAgIE5nSXNOb3RJZGVudGljYWxQaXBlTW9kdWxlLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0NvbmRpdGlvbnNQaXBlc01vZHVsZSB7fVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbTmdDb25kaXRpb25zUGlwZXNNb2R1bGUsIE5nVHlwZXNQaXBlc01vZHVsZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0Jvb2xlYW5QaXBlc01vZHVsZSB7fVxyXG4iXX0=