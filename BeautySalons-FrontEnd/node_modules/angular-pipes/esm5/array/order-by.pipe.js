import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe_1 = OrderByPipe;
    OrderByPipe._orderBy = function (a, b) {
        if (a instanceof Date && b instanceof Date) {
            return a < b ? -1 : a > b ? 1 : 0;
        }
        var floatA = parseFloat(a);
        var floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            var lowerA = a.toLowerCase();
            var lowerB = b.toLowerCase();
            return lowerA < lowerB ? -1 : lowerA > lowerB ? 1 : 0;
        }
        return floatA < floatB ? -1 : floatA > floatB ? 1 : 0;
    };
    OrderByPipe.prototype.transform = function (input, config) {
        if (config === void 0) { config = '+'; }
        if (!isArray(input)) {
            return input;
        }
        var configIsArray = isArray(config);
        // If config === 'param' OR ['param']
        if (!configIsArray || (configIsArray && config.length === 1)) {
            var propertyToCheck = configIsArray ? config[0] : config;
            var first = propertyToCheck.substr(0, 1);
            var desc_1 = first === '-'; // First character is '-'
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return tslib_1.__spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe_1._orderBy(a, b);
                    return desc_1 ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                var property_1 = first === '+' || desc_1 ? propertyToCheck.substr(1) : propertyToCheck;
                return tslib_1.__spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe_1._orderBy(a[property_1], b[property_1]);
                    return desc_1 ? -comparator : comparator;
                });
            }
        }
        else {
            // Config is an array of property
            return tslib_1.__spread(input).sort(function (a, b) {
                for (var i = 0; i < config.length; ++i) {
                    var first = config[i].substr(0, 1);
                    var desc = first === '-';
                    var property = first === '+' || desc ? config[i].substr(1) : config[i];
                    var comparator = OrderByPipe_1._orderBy(a[property], b[property]);
                    var comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    };
    var OrderByPipe_1;
    OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
        Pipe({
            name: 'orderBy',
        })
    ], OrderByPipe);
    return OrderByPipe;
}());
export { OrderByPipe };
var NgOrderByPipeModule = /** @class */ (function () {
    function NgOrderByPipeModule() {
    }
    NgOrderByPipeModule = tslib_1.__decorate([
        NgModule({
            declarations: [OrderByPipe],
            exports: [OrderByPipe],
        })
    ], NgOrderByPipeModule);
    return NgOrderByPipeModule;
}());
export { NgOrderByPipeModule };
//# sourceMappingURL=data:application/json;base64,