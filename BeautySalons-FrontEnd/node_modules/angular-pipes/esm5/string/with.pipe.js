import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isNull } from '../utils/utils';
var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    WithPipe.prototype.transform = function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || start == '' || ends == '') {
            return input;
        }
        input = csensitive ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            var a = !input.indexOf(csensitive ? start : start.toLowerCase());
            var b = input.indexOf(csensitive ? ends : ends.toLowerCase(), input.length - ends.length) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf(csensitive ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            var position = input.length - ends.length;
            return input.indexOf(csensitive ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
    WithPipe = tslib_1.__decorate([
        Pipe({ name: 'with' })
    ], WithPipe);
    return WithPipe;
}());
export { WithPipe };
var NgWithPipeModule = /** @class */ (function () {
    function NgWithPipeModule() {
    }
    NgWithPipeModule = tslib_1.__decorate([
        NgModule({
            declarations: [WithPipe],
            exports: [WithPipe],
        })
    ], NgWithPipeModule);
    return NgWithPipeModule;
}());
export { NgWithPipeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbInN0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2xEO0lBQUE7SUE2QkEsQ0FBQztJQTVCQyw0QkFBUyxHQUFULFVBQVUsS0FBYSxFQUFFLEtBQTJCLEVBQUUsSUFBMEIsRUFBRSxVQUEyQjtRQUFwRixzQkFBQSxFQUFBLFlBQTJCO1FBQUUscUJBQUEsRUFBQSxXQUEwQjtRQUFFLDJCQUFBLEVBQUEsa0JBQTJCO1FBQzNHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO1lBQ3BGLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVqRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLEdBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRTFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsR0FBUSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDL0U7SUFDSCxDQUFDO0lBNUJVLFFBQVE7UUFEcEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO09BQ1YsUUFBUSxDQTZCcEI7SUFBRCxlQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0E3QlksUUFBUTtBQW1DckI7SUFBQTtJQUErQixDQUFDO0lBQW5CLGdCQUFnQjtRQUo1QixRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDeEIsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO1NBQ3BCLENBQUM7T0FDVyxnQkFBZ0IsQ0FBRztJQUFELHVCQUFDO0NBQUEsQUFBaEMsSUFBZ0M7U0FBbkIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIGlzTnVsbCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3dpdGgnIH0pXHJcbmV4cG9ydCBjbGFzcyBXaXRoUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogc3RyaW5nLCBzdGFydDogc3RyaW5nIHwgbnVsbCA9IG51bGwsIGVuZHM6IHN0cmluZyB8IG51bGwgPSBudWxsLCBjc2Vuc2l0aXZlOiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkgfHwgKGlzTnVsbChzdGFydCkgJiYgaXNOdWxsKGVuZHMpKSB8fCBzdGFydCA9PSAnJyB8fCBlbmRzID09ICcnKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dCA9IGNzZW5zaXRpdmUgPyBpbnB1dCA6IGlucHV0LnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgaWYgKCFpc051bGwoc3RhcnQpICYmICFpc051bGwoZW5kcykpIHtcclxuICAgICAgbGV0IGE6IGJvb2xlYW4gPSAhaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gc3RhcnQgOiBzdGFydC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgbGV0IGI6IGJvb2xlYW4gPSBpbnB1dC5pbmRleE9mKGNzZW5zaXRpdmUgPyBlbmRzIDogZW5kcy50b0xvd2VyQ2FzZSgpLCBpbnB1dC5sZW5ndGggLSBlbmRzLmxlbmd0aCkgIT09IC0xO1xyXG5cclxuICAgICAgaWYgKGEgPT0gdHJ1ZSAmJiBiID09IHRydWUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTnVsbChzdGFydCkpIHtcclxuICAgICAgcmV0dXJuICFpbnB1dC5pbmRleE9mKGNzZW5zaXRpdmUgPyBzdGFydCA6IHN0YXJ0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNOdWxsKGVuZHMpKSB7XHJcbiAgICAgIGxldCBwb3NpdGlvbjogYW55ID0gaW5wdXQubGVuZ3RoIC0gZW5kcy5sZW5ndGg7XHJcblxyXG4gICAgICByZXR1cm4gaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gZW5kcyA6IGVuZHMudG9Mb3dlckNhc2UoKSwgcG9zaXRpb24pICE9PSAtMTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbV2l0aFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtXaXRoUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1dpdGhQaXBlTW9kdWxlIHt9XHJcbiJdfQ==